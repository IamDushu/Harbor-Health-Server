// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: member.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :one
INSERT INTO members (
    member_id,
    user_id,
    gender, 
    date_of_birth, 
    insurance,
    address_line_one,
    address_line_two,
    accepted_terms
) VALUES (
   $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING member_id, user_id, gender, date_of_birth, insurance, address_line_one, address_line_two, accepted_terms, created_at
`

type CreateMemberParams struct {
	MemberID       uuid.UUID `json:"member_id"`
	UserID         uuid.UUID `json:"user_id"`
	Gender         string    `json:"gender"`
	DateOfBirth    time.Time `json:"date_of_birth"`
	Insurance      string    `json:"insurance"`
	AddressLineOne string    `json:"address_line_one"`
	AddressLineTwo string    `json:"address_line_two"`
	AcceptedTerms  bool      `json:"accepted_terms"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRowContext(ctx, createMember,
		arg.MemberID,
		arg.UserID,
		arg.Gender,
		arg.DateOfBirth,
		arg.Insurance,
		arg.AddressLineOne,
		arg.AddressLineTwo,
		arg.AcceptedTerms,
	)
	var i Member
	err := row.Scan(
		&i.MemberID,
		&i.UserID,
		&i.Gender,
		&i.DateOfBirth,
		&i.Insurance,
		&i.AddressLineOne,
		&i.AddressLineTwo,
		&i.AcceptedTerms,
		&i.CreatedAt,
	)
	return i, err
}

const getMember = `-- name: GetMember :one
SELECT member_id, user_id, gender, date_of_birth, insurance, address_line_one, address_line_two, accepted_terms, created_at FROM members
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, userID uuid.UUID) (Member, error) {
	row := q.db.QueryRowContext(ctx, getMember, userID)
	var i Member
	err := row.Scan(
		&i.MemberID,
		&i.UserID,
		&i.Gender,
		&i.DateOfBirth,
		&i.Insurance,
		&i.AddressLineOne,
		&i.AddressLineTwo,
		&i.AcceptedTerms,
		&i.CreatedAt,
	)
	return i, err
}
