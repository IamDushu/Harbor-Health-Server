// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: provider.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getProvidersFromLocation = `-- name: GetProvidersFromLocation :many
SELECT 
    p.provider_id,
    u.first_name,
    u.last_name,
    p.credentials,
    p.specialization
FROM 
    provider_locations pl
JOIN 
    providers p ON pl.provider_id = p.provider_id
JOIN 
    users u ON p.user_id = u.user_id
WHERE 
    pl.location_id = $1
    AND p.is_available = true
`

type GetProvidersFromLocationRow struct {
	ProviderID     uuid.UUID `json:"provider_id"`
	FirstName      string    `json:"first_name"`
	LastName       string    `json:"last_name"`
	Credentials    string    `json:"credentials"`
	Specialization string    `json:"specialization"`
}

func (q *Queries) GetProvidersFromLocation(ctx context.Context, locationID uuid.UUID) ([]GetProvidersFromLocationRow, error) {
	rows, err := q.db.QueryContext(ctx, getProvidersFromLocation, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProvidersFromLocationRow{}
	for rows.Next() {
		var i GetProvidersFromLocationRow
		if err := rows.Scan(
			&i.ProviderID,
			&i.FirstName,
			&i.LastName,
			&i.Credentials,
			&i.Specialization,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
