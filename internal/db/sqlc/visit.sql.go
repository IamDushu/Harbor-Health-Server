// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: visit.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const checkVisitSlotExists = `-- name: CheckVisitSlotExists :one
SELECT EXISTS (
    SELECT 1 FROM visits
    WHERE provider_id = $1 AND scheduled_at = $2
) AS exists
`

type CheckVisitSlotExistsParams struct {
	ProviderID  uuid.UUID `json:"provider_id"`
	ScheduledAt time.Time `json:"scheduled_at"`
}

func (q *Queries) CheckVisitSlotExists(ctx context.Context, arg CheckVisitSlotExistsParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkVisitSlotExists, arg.ProviderID, arg.ScheduledAt)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createVisit = `-- name: CreateVisit :one
INSERT INTO visits (visit_id, provider_id, member_id, location_id, scheduled_at, status, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING visit_id, provider_id, member_id, location_id, scheduled_at, completed_at, status, notes, created_at
`

type CreateVisitParams struct {
	VisitID     uuid.UUID `json:"visit_id"`
	ProviderID  uuid.UUID `json:"provider_id"`
	MemberID    uuid.UUID `json:"member_id"`
	LocationID  uuid.UUID `json:"location_id"`
	ScheduledAt time.Time `json:"scheduled_at"`
	Status      string    `json:"status"`
	Notes       string    `json:"notes"`
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) (Visit, error) {
	row := q.db.QueryRowContext(ctx, createVisit,
		arg.VisitID,
		arg.ProviderID,
		arg.MemberID,
		arg.LocationID,
		arg.ScheduledAt,
		arg.Status,
		arg.Notes,
	)
	var i Visit
	err := row.Scan(
		&i.VisitID,
		&i.ProviderID,
		&i.MemberID,
		&i.LocationID,
		&i.ScheduledAt,
		&i.CompletedAt,
		&i.Status,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
